[
  
  {
    "title": "游记第一 · 烟雨桂林",
    "url": "/posts/%E7%83%9F%E9%9B%A8%E6%A1%82%E6%9E%97/",
    "categories": "游记",
    "tags": "旅行",
    "date": "2024-05-16 00:00:00 +0800",
    





    
    "snippet": "一想到旅游，往昔游历山水的画卷便在脑海中悠然展开。八达岭长城沐浴在落日余晖中，霞光为其披上绯红纱衣之景跃然眼前；杭州的桂花糕，甜美软糯仿佛仍萦绕舌尖；而济南清澈的泉水，如同明镜环绕，历历在目。在默默里算着，已然四个春秋未出过这座城市了。岁月悠悠，这些旅行断想都在时间的冲刷下逐渐沉淀，深埋在了儿时的回忆中。我常有一种感觉：随着时光的流逝，过往的每一刻似乎都被镀上了一层温柔的光辉，愈发显得美好而...",
    "content": "一想到旅游，往昔游历山水的画卷便在脑海中悠然展开。八达岭长城沐浴在落日余晖中，霞光为其披上绯红纱衣之景跃然眼前；杭州的桂花糕，甜美软糯仿佛仍萦绕舌尖；而济南清澈的泉水，如同明镜环绕，历历在目。在默默里算着，已然四个春秋未出过这座城市了。岁月悠悠，这些旅行断想都在时间的冲刷下逐渐沉淀，深埋在了儿时的回忆中。我常有一种感觉：随着时光的流逝，过往的每一刻似乎都被镀上了一层温柔的光辉，愈发显得美好而珍贵。或许，这正是诸多文人墨客钟情于描绘童年时光的原因吧。每当这些景象在心头重现，一股暖流携带着喜悦油然而生，不禁叹于生活的美好一面。放了寒假，我那渴望远行的心扉再也无法禁锢。于是我怀着激动的心情，踏上了往桂林的火车。旅游，当然要有头有尾。这头便是坐火车。在我的旅游印象中，来往的过程也是其中的重要一环。每当我置身机场或者火车站，心中总充满旅游的期待。对旅游的憧憬总是充满梦幻色彩，而火车站的片刻停留，不知不觉间化作了我心灵深处最柔软的甜蜜地带。熙熙攘攘的人群在宽广的车站内流动，行李箱轻巧地穿梭在各式小店之间，一声声火车进站之音在大厅回响……一幅幅画面勾起了我儿时的旅游记忆。随着太阳渐渐西沉，我们的火车慢慢驶出站台。“奇山异水，天下独绝”的钱塘江从脚下穿过，我们一路顺着湘江南下，一渡、二渡、三渡，还有一次与湘江并行。夜幕降临，星辰引路，直至晨光破晓，我们终于抵达了风景如画的桂林。第一站是芦笛岩。检票口旁边的墙上挂满大大小小的照片，都是大人物来参观的记录。芦笛岩，作为桂林喀斯特地貌的瑰宝，进出口巧妙隐匿于青山半腰，增添了几分探秘的意趣。说起溶洞，我想起小时候去的张家界。那里的石头千姿百态，长长的石钟乳和钟乳石（我也是在那次知道了这两个名字）顶天立地，还时常有滴水飞落。溶洞的空间也幽邃深远，站在天桥上，全方位的景色尽收眼底。相比之下，芦笛岩虽拥有一处宏大的洞室，却在景观上略显逊色，未能重现张家界那般震撼人心的视觉盛宴，颇感遗憾。出了芦笛岩，我们打道回府。这酒店正靠着大名鼎鼎的漓江。漓江，宛如一幅流动的水墨画卷，轻展于广西的翠岭之间。看着漓江水，我忽然想起了《桂林山水》中的句子“漓江的水真静啊，静得让你感觉不到它在流动；漓江的水真清啊，清得可以看见江底的沙石；漓江的水真绿啊，绿得仿佛那是一块无瑕的翡翠。”第一次读到还是小时候，从此，我心中对最完美之水的想象原型就是漓江了。此时此刻，眼前便是多年来梦中之景，便产生出一种梦幻的感觉。啊！这就是漓江！这就是天下闻名的漓江！我几乎是小跑着走向漓江之畔。漓江的水，碧绿而深邃，宛如一块流动的翡翠，在轻风的挑逗下，闪烁着鳞甲般的光泽。天空中，烟雨蒙蒙，细雨如织，它们不紧不慢地从灰白的天幕滑落，仿若天地间最细腻的情感，裹挟着清风，最终温柔地亲吻江面。每滴雨珠的触碰，都晕开圈圈波纹，仿佛是大自然最细致的画家，以水为纸，以雨为笔，在宽阔的江面上勾勒出一幅幅瞬息万变的水墨画。为这雨中的漓江，更添了几分柔情与朦胧。山影、树影、云影在雨雾中交织融合，远山似被一层轻纱轻轻覆盖，显得既真实又梦幻。我站立于此，任由细雨轻拂面颊，呼吸间满是湿润的南国植物与江水混合的清新气息，心灵在这份宁静与美丽中得到了释放和洗涤。直到雨水浸透了鞋子，才把我拉回现实，便匆匆忙忙回去了。下一个景点是象鼻山。我原本以为象鼻山隐匿于深山老林，但没想到它离我的酒店只有几百米的距离。以往经常在电脑桌面各种地方看到的景象出现在面前，令人恍若梦境。山不在高，水不在深，关键是其独特的姿态。山形狭长，两侧被碧波环绕，其中之一便是著名的漓江。河水在象鼻处汇合，形成一个湖。尤为独特的是，山体临湖一侧，自然雕琢出一道拱门，恰似一头温顺的大象正悠然饮水于湖畔。象鼻笔直插入水中，亦是桂林群山的典型写照。雪下了起来，悄无声息地降临在象鼻山之上。起初，只是零星的雪花，如同天空撒下的细碎珍珠，轻轻触碰着大地的脸颊，转瞬即化。然而，不久后，雪势渐增，如雨点般急促地落下，在空中交织成一幅幅精致的画卷，好似迫不及待要目睹象鼻山的美景。听司机说，桂林已经二十余年未下过雪了。此番意外遇雪，实属罕见之喜，甚至能看到桂林人都见不到之景。观赏了美景之后，第二天，我来到了靖江王府，见识桂林的人文历史。建筑是石头的史诗，古老的城墙无声叙说着靖江王府昔日的威严。抚在墙垣上，感受那粗糙的表面承载了多少岁月的痕迹，斑驳的石雕凝结着多少岁月的沉淀。顺着大道向里走，大大的“三元及第”几个字赫然现于头顶，满载着科举考生的心之所盼。王府的导游带着我们一行，了解了靖江王府的历史。靖江王府始建于明洪武五年（1372年），是明太祖朱元璋分封侄孙朱守谦为靖江王时修造的王城，从此世代相袭，历时280年。1921年孙中山督师北伐，曾驻节于此。拓福字、考科举、拜太岁等一系列活动让历史的温度和文化的韵味展现。此府不仅是一处历史遗迹，更是自然与人文的融合。此府依独秀峰而建，山虽不高，但山势险峻，景色秀丽。有文为证：  夫独秀岩者，据岭表之胜，控藩国之雄，上方真境拔引乎西南，尧峰舜洞屹立乎东北，桂岭西山巨镇乎后先，洲东渡映带乎左右，于乃真峰屹立，高插天半，势压鸿尻。盖八景之奇无出其最者，故名独秀，是扶舆清淑，山川磅礴之气有以致然也。——《游独秀岩记》 独秀岩西有洞屋，如幽邃衍迤，旁则竹树葱郁，灵羽翔集，前则宫垣叠带，后则涟漪濯秀。——《独秀岩西洞记》 府在独秀山前，其地为广西甲胜之最。一峰堑插霄汉，四时林木荣辉，下涌流泉， 潭如新月，巍然上下，绝秀丽乎龙飞凤舞之胜。爰居斯地，患无终废，皆因地利也。——《独秀岩记》天色渐晚，我们出了王府，回到了酒店。晨曦初破，薄雾缭绕，群山似是犹抱琵琶半遮面，羞涩地透出青黛色的轮廓。第三天，我们来到百里画廊，准备亲眼目睹桂林那最为秀丽的风景。船开始行进后不久，立刻被眼前的景致牢牢吸引。那是我从未见过的绝美风光，是一种言语难以尽数描绘的秀美，令人为之震颤。只见几个庞大的影子在薄雾中渐行渐近，原来是山。随着船行的深入，我迫不及待地上到观景平台。前后都是一眼望不穿的山组成的林。近处的山清晰可见，茂盛的数木负势竞上，互相轩邈；稍微远点，山的颜色淡了；再往后，山就只剩下轮廓，逐渐消失在雾气的氤氲中。一山绿，一山青；一山浓，一山淡，人好像置身画卷，游荡在水墨丹青之间。从平地上隆起高高的平原，平原之上，一个又一个的山尖耸立起来，争高直指，千百成峰。山顶在岁月的雕琢下圆润无棱，但形状却被保留下来。真的，这里的山，每座都不一样。江水悠悠，碧波荡漾，清澈见底，仿佛能洗净尘世的一切烦恼。从流飘荡，任意东西，随性中带着几分悠然与宁静，仿佛时光在这里慢了脚步。悬泉瀑布，飞漱其间。清荣峻茂，良多趣味。群山环抱间，偶尔可见飞鸟掠过，点缀了天空，更添几分生机与灵动。江风拂面，带着水汽的清新与山林的芬芳，令人心旷神怡。阳光透过轻纱般的云层，洒在水面上，形成斑驳的光影，金色与碧绿交织，波光粼粼，美不胜收。山峦层层叠叠，倒映在水中，与真实的山景交相辉映，让人分不清哪是山，哪是影。静静地站着，听着水声潺潺，仿佛是大自然最悠扬的乐章，心灵在这份宁静与美好中得到了彻底的释放。此刻，人与漓江、与自然，仿佛融为了一体，体验着前所未有的和谐与宁静，让人疑心是否是进入了世外桃源。未完待续"
  },
  
  {
    "title": "向量分析",
    "url": "/posts/%E5%90%91%E9%87%8F%E5%88%86%E6%9E%90/",
    "categories": "maths",
    "tags": "analysis",
    "date": "2024-01-13 00:00:00 +0800",
    





    
    "snippet": "前段时间我尝试了在微积分中用向量来求解一些问题，在这里记录一下。用英文写是因为懒得切换输入法了。Suppose L is a curve on the complex plain. Take dividing points $z_0,z_1\\cdots z_n$, where $z_0$ is the start of L and $z_n$ is the end. Let$f:\\mathb...",
    "content": "前段时间我尝试了在微积分中用向量来求解一些问题，在这里记录一下。用英文写是因为懒得切换输入法了。Suppose L is a curve on the complex plain. Take dividing points $z_0,z_1\\cdots z_n$, where $z_0$ is the start of L and $z_n$ is the end. Let$f:\\mathbb{C}\\to\\mathbb{R}^n,g:\\mathbb{C}\\to\\mathbb{C}.$definition Let \\(F(z)= \\left[ \\begin{array}{c} F_1(z )\\\\ F_2(z )\\\\\\cdots \\end{array} \\right].\\) Define\\[F'(z_i)=\\frac{\\mathrm d F}{\\mathrm dx}=\\lim_{\\lambda\\to 0}\\frac{F(z_{i+1})-F(z_i)}{z_{i+1}-z_i}= \\left[ \\begin{array}{c} F_1'(z )\\\\ F_2'(z )\\\\\\cdots \\end{array} \\right].\\]\\[\\int_{L}f(z)\\mathrm dz=\\lim_{\\lambda\\to 0}\\sum_{i=0}^{n-1}f(z_i)(z_{i+1}-z_i).\\]Let \\(\\displaystyle{f(z)= \\left[ \\begin{array}{c} z \\\\ z ^{ 2 } \\end{array} \\right],g(z)=z }\\) , we have\\[\\displaystyle\\begin{align*}\\int_{L}f(z)\\mathrm dz=&amp;\\int_{L}\\left[ \\begin{array}{c} z \\\\ z ^{ 2 } \\end{array} \\right]\\mathrm dz\\\\=&amp;\\lim_{\\lambda\\to 0}\\sum_{i=0}^{n-1}\\left[ \\begin{array}{c} z_i \\\\ z_i ^{ 2 } \\end{array} \\right](z_{i+1}-z_i)\\\\=&amp;\\left[ \\begin{array}{c}\\lim\\limits_{\\lambda\\to 0}\\sum\\limits_{i=0}^{n-1} z_i (z_{i+1}-z_i)\\\\ \\lim\\limits_{\\lambda\\to 0}\\sum\\limits_{i=0}^{n-1}z_i ^{ 2 }(z_{i+1}-z_i) \\end{array} \\right]\\\\=&amp;\\left[ \\begin{array}{c} \\int_{L}z\\mathrm dz \\\\ \\int_{L}z ^{ 2 } \\mathrm dz\\end{array} \\right].\\\\\\end{align*}\\]Generally, we havetheorem 1 Let \\(\\displaystyle{f(z)= \\left[ \\begin{array}{c} f_1(z )\\\\ f_2(z )\\\\\\cdots \\end{array} \\right]}\\) . Then\\[\\displaystyle\\begin{align*}\\int_{L}f(z)\\mathrm dz=&amp;\\left[ \\begin{array}{c} \\int_{L} f_1(z )\\mathrm dz \\\\ \\int_{L} f_2(z )\\mathrm dz\\\\\\cdots\\end{array} \\right].\\\\\\end{align*}\\tag1\\]which implies the Newton-Leibniz formula.theorem 2 (Newton-Leibniz formula)  let \\(\\displaystyle{f(z)= \\left[ \\begin{array}{c} f_1(z )\\\\ f_2(z )\\\\\\cdots \\end{array} \\right]}\\) , $F’(z)=f(z)$. then\\[\\displaystyle\\begin{align*}\\int_{L}f(z)\\mathrm dz=&amp;F(b)-F(a).\\\\\\end{align*}\\tag2\\]proof 1  From theorem 1 we have\\[\\displaystyle\\begin{align*}\\int_{L}f(z)\\mathrm dz=&amp;\\left[ \\begin{array}{c} \\int_{L} f_1(z )\\mathrm dz \\\\ \\int_{L} f_2(z )\\mathrm dz\\\\\\cdots\\end{array} \\right]\\\\=&amp;\\left[ \\begin{array}{c} F_1(b)-F_1(a) \\\\ F_2(b)-F_2(a)\\\\\\cdots\\end{array} \\right]\\tag{Newton-Leibniz}\\\\=&amp;F(b)-F(a).\\end{align*}\\]proof 2\\[\\begin{align*}\\int_{L}f(z)\\mathrm dz=&amp;\\lim_{\\lambda\\to 0}\\sum_{i=0}^{n-1}\\frac{F(z_{i+1})-F(z_i)}{z_{i+1}-z_i}(z_{i+1}-z_i)\\\\=&amp;\\lim_{\\lambda\\to 0}\\sum_{i=0}^{n-1}F(z_{i+1})-F(z_i)\\\\=&amp;F(z_{n})-F(z_0)\\\\\\end{align*}\\]example Let \\(\\displaystyle{f(z)= \\left[ \\begin{array}{c} z \\\\ z ^{ 2 } \\end{array} \\right],g(z)=z }\\) . Then\\[\\displaystyle\\begin{align*}\\int_{0}^1f(z)\\mathrm dz=&amp;F(1)-F(0)\\\\=&amp;\\left[ \\begin{array}{c} \\frac{ 1 }{ 2 } \\\\ \\frac{ 1 }{ 3 }\\end{array} \\right]-\\left[ \\begin{array}{c} 0 \\\\0\\end{array} \\right]\\\\=&amp;\\left[ \\begin{array}{c} \\frac{ 1 }{ 2 } \\\\ \\frac{ 1 }{ 3 }\\end{array} \\right].\\\\\\end{align*}\\]"
  },
  
  {
    "title": "我的3d图片渲染程序的原理",
    "url": "/posts/%E6%88%91%E7%9A%843d%E5%9B%BE%E7%89%87%E6%B8%B2%E6%9F%93%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8E%9F%E7%90%86/",
    "categories": "",
    "tags": "algorithm",
    "date": "2023-11-25 00:00:00 +0800",
    





    
    "snippet": "前段时间写了个渲染3d图片的程序。我没参考任何有关的资料，从零开始的，所以可能和主流实现有冲突。假设眼睛是一个点，这个程序要做的就是把物体映射到眼睛前的一块画布上。所以可以画一条从眼睛为起始的一条射线，在暂时不考虑光影的情况下，射线和物体离眼睛最近的焦点的颜色就画在画布与射线的交点上。这就是核心原理。怎么计算交点呢？让计算机去试肯定行不通，那肯定就要用到数学了。首先，我们设定眼睛和物体都位于...",
    "content": "前段时间写了个渲染3d图片的程序。我没参考任何有关的资料，从零开始的，所以可能和主流实现有冲突。假设眼睛是一个点，这个程序要做的就是把物体映射到眼睛前的一块画布上。所以可以画一条从眼睛为起始的一条射线，在暂时不考虑光影的情况下，射线和物体离眼睛最近的焦点的颜色就画在画布与射线的交点上。这就是核心原理。怎么计算交点呢？让计算机去试肯定行不通，那肯定就要用到数学了。首先，我们设定眼睛和物体都位于三维空间中，那么我们就可以用一个三维向量来表示这些东西。射线是已知的，设它为 $\\vec e+p\\vec v$ 。设物体表面是一个二维平面，用三角形可以唯一确定一个平面，所以用三角形作为物体表面。设三个顶点为 $\\vec a ,\\vec a +\\vec b,\\vec a +\\vec c$ ，平面则可以表示为 $\\vec a +n\\vec b+m\\vec c$ 。联立，可得 $\\vec a+n\\vec b+m\\vec c=\\vec e+p\\vec v$ 。运用一点线代知识可知\\[\\begin{bmatrix}-n\\\\-m\\\\p\\end{bmatrix}=\\begin{pmatrix}\\vec b  &amp;\\vec c  &amp;\\vec v\\end{pmatrix}^{-1}\\left(\\vec a-\\vec e\\right)\\\\\\]另外，我们还要知道这个点是否在三角形内。注意到，如果把平面上的点都用[n,m]两个坐标表示（n,m是已求出的），a+b的坐标变成[1,0]，a+c的坐标变成[0,1]，a的坐标变成[0,0]。容易证明，变换后一个点在三角形内等价于变换前这个点在三角形内。这样就方便判断了。满足上述两条的点就是交点。还需要进行距离的排序，就好了。然后就是编程部分了。我先用python写了一遍，速度堪忧，就让那个老朋友帮忙改成了c++，用到opencv又配置了一番。暂时不开源了，我的代码也没什么可借鉴之处。先写到这儿，以后加了新特性（比如光影）就再更新。2023年11月25日。"
  }
  
]

